# .github/workflows/ci_cd_pipeline.yml
name: NLP Review Analysis CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-and-lint:
    name: Test, Lint, and Format
    runs-on: ubuntu-latest 
    strategy:
      matrix:
        python-version: ["3.9"] 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      # THÊM BƯỚC NÀY VÀO:
      - name: Install system dependencies for Pillow and other libraries
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            libjpeg-dev \
            zlib1g-dev \
            libpng-dev \
            libtiff5-dev \
            libfreetype6-dev \
            liblcms2-dev \
            libwebp-dev \
            libopenjp2-7-dev \


      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pytest pytest-cov bandit
          pip install -r requirements.txt


      - name: Lint with Flake8
        run: |

          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Format with Black and Sort imports with isort (Check only)
        run: |
          black --check .
          isort --check-only .
        continue-on-error: true




  # ----- PHẦN CD - VÍ DỤ BUILD DOCKER IMAGE VÀ PUSH LÊN GITHUB CONTAINER REGISTRY (GHCR) -----
  # Job này chỉ chạy khi push lên nhánh 'main' VÀ job 'test-and-lint' thành công
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test-and-lint
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Convert repository name to lowercase
        id: repo_name_lowercase # Đặt ID cho step này để tham chiếu output
        run: echo "name=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ steps.repo_name_lowercase.outputs.name }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ steps.repo_name_lowercase.outputs.name }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
# ----- PHẦN CD - VÍ DỤ TRIỂN KHAI LÊN SERVER QUA SSH -----
# Job này chỉ chạy khi push lên nhánh 'main' VÀ job 'build-and-push-docker' thành công (nếu bạn dùng Docker)
# deploy-to-server:
#   name: Deploy to Production Server
#   runs-on: ubuntu-latest
#   needs: build-and-push-docker # Hoặc 'test-and-lint' nếu không dùng Docker
#   if: github.ref == 'refs/heads/main' && github.event_name == 'push'

#   steps:
#     - name: Deploy to server
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ secrets.SERVER_HOST }}
#         username: ${{ secrets.SERVER_USERNAME }}
#         key: ${{ secrets.SSH_PRIVATE_KEY }}
#         port: ${{ secrets.SERVER_PORT || 22 }}
#         script: |
#           echo "Starting deployment..."
#           cd /path/to/your/app/on/server
#           # Ví dụ kéo image mới và restart container
#           docker pull ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
#           docker stop my-nlp-app-container || true # Dừng container cũ, || true để không lỗi nếu chưa có
#           docker rm my-nlp-app-container || true   # Xóa container cũ
#           docker run -d --name my-nlp-app-container -p 8000:8000 \
#             -e YOUR_ENV_VARIABLE=${{ secrets.YOUR_ENV_VARIABLE_FOR_APP }} \
#             ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
#           echo "Deployment finished!"
#           # Hoặc nếu không dùng Docker:
#           # git pull origin main
#           # pip install -r requirements.txt
#           # systemctl restart your-app-service # (Nếu dùng systemd)
#           # pm2 restart app.py # (Nếu dùng PM2)
