# .github/workflows/ci_cd_pipeline.yml

name: NLP Review Analysis CI/CD

on:
  push:
    branches: [ main, develop ] # Chạy khi push lên nhánh main hoặc develop
  pull_request:
    branches: [ main, develop ] # Chạy khi tạo PR tới nhánh main hoặc develop

jobs:
  test-and-lint:
    name: Test, Lint, and Format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"] # Chạy trên nhiều phiên bản Python nếu cần

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip' # Cache dependencies để build nhanh hơn

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Cài thêm các thư viện cho linting và testing nếu chưa có trong requirements.txt
          pip install flake8 black isort pytest pytest-cov bandit

      - name: Lint with Flake8
        run: |
          # Dừng build nếu có lỗi. Bỏ --exit-zero nếu muốn chỉ cảnh báo
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Thoát nếu có bất kỳ lỗi nào (ngoại trừ một số mã lỗi nhất định)
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Format with Black and Sort imports with isort (Check only)
        run: |
          black --check .
          isort --check-only .

      - name: Run tests with Pytest
        run: |
          # Giả sử bạn có thư mục 'tests' chứa các file test_*.py
          # Hoặc pytest sẽ tự tìm các file test
          # pytest --cov=src # Để tính coverage cho thư mục src
          pytest tests/ # Hoặc chỉ pytest nếu tests ở thư mục gốc hoặc cấu hình trong pytest.ini

      - name: Security Scan with Bandit (Optional)
        run: |
          bandit -r src/ -ll # -ll để chỉ báo cáo các vấn đề ở mức độ trung bình trở lên

  # ----- PHẦN CD - VÍ DỤ BUILD DOCKER IMAGE VÀ PUSH LÊN GITHUB CONTAINER REGISTRY (GHCR) -----
  # Job này chỉ chạy khi push lên nhánh 'main' VÀ job 'test-and-lint' thành công
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test-and-lint # Phải hoàn thành job test-and-lint trước
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' # Chỉ chạy khi push lên main

    permissions:
      contents: read
      packages: write # Cần quyền để push image lên GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN được cung cấp tự động

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context là thư mục gốc của repo (nơi chứa Dockerfile)
          file: ./Dockerfile # Đường dẫn tới Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }}
          # Thêm cache cho Docker build để nhanh hơn
          cache-from: type=gha
          cache-to: type=gha,mode=max

# ----- PHẦN CD - VÍ DỤ TRIỂN KHAI LÊN SERVER QUA SSH -----
# Job này chỉ chạy khi push lên nhánh 'main' VÀ job 'build-and-push-docker' thành công (nếu bạn dùng Docker)
# deploy-to-server:
#   name: Deploy to Production Server
#   runs-on: ubuntu-latest
#   needs: build-and-push-docker # Hoặc 'test-and-lint' nếu không dùng Docker
#   if: github.ref == 'refs/heads/main' && github.event_name == 'push'

#   steps:
#     - name: Deploy to server
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ secrets.SERVER_HOST }}
#         username: ${{ secrets.SERVER_USERNAME }}
#         key: ${{ secrets.SSH_PRIVATE_KEY }}
#         port: ${{ secrets.SERVER_PORT || 22 }}
#         script: |
#           echo "Starting deployment..."
#           cd /path/to/your/app/on/server
#           # Ví dụ kéo image mới và restart container
#           docker pull ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
#           docker stop my-nlp-app-container || true # Dừng container cũ, || true để không lỗi nếu chưa có
#           docker rm my-nlp-app-container || true   # Xóa container cũ
#           docker run -d --name my-nlp-app-container -p 8000:8000 \
#             -e YOUR_ENV_VARIABLE=${{ secrets.YOUR_ENV_VARIABLE_FOR_APP }} \
#             ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
#           echo "Deployment finished!"
#           # Hoặc nếu không dùng Docker:
#           # git pull origin main
#           # pip install -r requirements.txt
#           # systemctl restart your-app-service # (Nếu dùng systemd)
#           # pm2 restart app.py # (Nếu dùng PM2)
